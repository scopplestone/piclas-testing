name: cmake-ninja

on:
  push:
  #pull_request:
  release:
    types: published

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    # Use centos7
    container:
      image: centos:7
      options: --privileged

    steps:
    - name: Install GIT
      run: |
        yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
        yum -y install git
        git --version

    - name: Checkout repository including the .git directory
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Dependencies
      run: |
        git config --global --add safe.directory '*'
        git status
        curl -L -O https://github.com/Kitware/CMake/releases/download/v3.16.4/cmake-3.16.4-Linux-x86_64.sh
        chmod +x cmake-3.16.4-Linux-x86_64.sh
        ./cmake-3.16.4-Linux-x86_64.sh --skip-license --prefix=/usr/local
        curl -L -O https://www.mirrorservice.org/sites/dl.fedoraproject.org/pub/epel/7/x86_64/Packages/p/p7zip-16.02-20.el7.x86_64.rpm
        curl -L -O https://www.mirrorservice.org/sites/dl.fedoraproject.org/pub/epel/7/x86_64/Packages/p/p7zip-plugins-16.02-20.el7.x86_64.rpm
        rpm -U --quiet p7zip-16.02-20.el7.x86_64.rpm
        rpm -U --quiet p7zip-plugins-16.02-20.el7.x86_64.rpm
        yum install -y epel-release
        yum install -y make libasan gcc-gfortran gcc-c++ unzip openblas-devel lapack-devel zlib-devel tree fuse-sshfs fuse-libs file openmpi-devel wget
        groupadd fuse
        user="$(whoami)"
        usermod -a -G fuse "$user"
        curl -L -O https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-linux.zip
        unzip ninja-linux.zip
        mv ./ninja /usr/bin

    - name: Install GNU GCC 8
      run: |
        yum install -y centos-release-scl
        yum install -y devtoolset-8-gcc*
        source /opt/rh/devtoolset-8/enable
        scl enable devtoolset-8 bash
        which gcc
        echo 'source /opt/rh/devtoolset-8/enable' >> ~/.bashrc
        echo 'scl enable devtoolset-8 bash' >> ~/.bashrc
        #GCC_DIR='/opt/rh/devtoolset-8/root/usr'
        GCC_DIR=$(dirname $(dirname $(which gcc)))
        echo 'export PATH="'${GCC_DIR}'/bin:$PATH"' >> ~/.bashrc
        echo 'export LD_LIBRARY_PATH="'${GCC_DIR}'/lib:$LD_LIBRARY_PATH"' >> ~/.bashrc
        echo 'export LD_LIBRARY_PATH="'${GCC_DIR}'/lib64:$LD_LIBRARY_PATH"' >> ~/.bashrc
        echo 'export CC="'${GCC_DIR}'/bin/gcc"' >> ~/.bashrc
        echo 'export GCC="'${GCC_DIR}'/bin/gcc"' >> ~/.bashrc
        echo 'export FC="'${GCC_DIR}'/bin/gfortran"' >> ~/.bashrc
        echo 'export F77="'${GCC_DIR}'/bin/gfortran"' >> ~/.bashrc
        echo 'export F90="'${GCC_DIR}'/bin/gfortran"' >> ~/.bashrc
        echo 'export CXX="'${GCC_DIR}'/bin/g++"' >> ~/.bashrc
        echo 'export FC="'${GCC_DIR}'/bin/gfortran"' >> ~/.bashrc
        CFLAGS='-march=generic -mtune=generic -O3 -pipe'
        echo 'CHOST="x86_64-pc-linux-gnu"' >> ~/.bashrc
        echo 'CFLAGS="'${CFLAGS}'"' >> ~/.bashrc
        echo 'CXXFLAGS="'${CFLAGS}'"' >> ~/.bashrc
        echo "======================================================================="
        gcc --version
        cat ~/.bashrc
        echo "======================================================================="

    - name: Install OpenMPI 4.1.0
      run: |
        #yum install -y centos-release-scl
        #yum install -y openmpi-devtoolset-8-runtime
        #source /opt/rh/devtoolset-8/enable
        #scl enable devtoolset-8 bash
        #which gcc
        #which mpirun
        source ~/.bashrc
        yum install -y rdma-core-devel
        wget https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.0.tar.gz
        tar -xvf openmpi-4.1.0.tar.gz
        cd openmpi-4.1.0
        ./configure --enable-static --disable-dlopen --enable-mpi1-compatibility --prefix=/opt/openmpi/4.1.0
        make -j && make install
        # Check
        MPI_DIR=$(dirname $(dirname $(which mpirun)))
        echo "======================================================================="
        echo ${MPI_DIR}
        MPI_DIR='/opt/openmpi/4.1.0'
        echo ${MPI_DIR}
        echo 'export MPI_DIR="'${GCC_DIR}'"' >> ~/.bashrc
        echo 'export PATH="'${GCC_DIR}'/bin:$PATH"' >> ~/.bashrc
        echo 'export LD_LIBRARY_PATH="'${GCC_DIR}'/lib:$LD_LIBRARY_PATH"' >> ~/.bashrc
        echo "======================================================================="
        which mpirun
        gcc --version
        cat ~/.bashrc
        echo "======================================================================="

    - name: Install HDF5 1.12.0
      run: |
        source ~/.bashrc
        wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.12/hdf5-1.12.2/src/hdf5-1.12.2.tar.gz
        tar -xvf hdf5-1.12.0.tar.gz
        cd hdf5-1.12.0
        ./configure --prefix=/opt/hdf5/1.12.0/gcc/9.3.1/openmpi/4.1.0 --with-pic --enable-fortran --enable-parallel
        make -j && make install

    - name: Configure CMake
      shell: bash
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        #which gcc
        #gcc --version
        #source /opt/rh/devtoolset-8/enable
        #scl enable devtoolset-8 bash
        #which gcc
        #gcc --version
        source ~/.bashrc
        cmake -G Ninja -B build_DSMC -DPICLAS_TIMEDISCMETHOD=DSMC -DCMAKE_BUILD_TYPE=Release -DLIBS_USE_MPI=ON -DLIBS_BUILD_HDF5=ON -DPICLAS_BUILD_POSTI=ON -DPOSTI_BUILD_SUPERB=ON -DPICLAS_READIN_CONSTANTS=ON -DCMAKE_INSTALL_PREFIX=/usr

    - name: Build
      shell: bash
      # Build your program with the given configuration
      run: cmake --build build_DSMC

    - name: Install AppImage
      shell: bash
      run: |
        curl -L -O https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage

    - name: Create piclas AppImage
      shell: bash
      run: |
        echo "======================================================================="
        ls -la build_DSMC/bin
        echo "======================================================================="
        cd build_DSMC
        DESTDIR=AppDir ninja install
        mkdir -p AppDir/usr/share/icons
        cp ../docs/logo.png AppDir/usr/share/icons/piclas.png
        #curl -L -O https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        #chmod +x linuxdeploy-x86_64.AppImage
        #tree AppDir
        ./../linuxdeploy-x86_64.AppImage --appdir AppDir --output appimage --desktop-file=../.github/workflows/piclas.desktop

    - name: Create piclas2vtk AppImage
      shell: bash
      run: |
        echo "======================================================================="
        ls -la build_DSMC/bin
        echo "======================================================================="
        cd build_DSMC
        DESTDIR=AppDir ninja install
        mkdir -p AppDir/usr/share/icons
        cp ../docs/logo.png AppDir/usr/share/icons/piclas2vtk.png
        #curl -L -O https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        #chmod +x linuxdeploy-x86_64.AppImage
        #tree AppDir
        ./../linuxdeploy-x86_64.AppImage --executable bin/piclas2vtk --appdir AppDir --output appimage --desktop-file=../.github/workflows/piclas2vtk.desktop

    - name: Set env
      run: |
        echo "======================================================================="
        echo "build_DSMC"
        ls -la build_DSMC
        echo "======================================================================="
        echo "build_DSMC/bin"
        ls -la build_DSMC/bin
        echo "======================================================================="
        echo "PICLAS_BINARYPATH_DMSC=$(ls build_DSMC/piclas-*x86_64.AppImage)" >> $GITHUB_ENV
        echo "PICLAS_BINARYNAME_DSMC=$(basename $(ls build_DSMC/piclas-*x86_64.AppImage))" >> $GITHUB_ENV
        echo "PICLAS2VTK_BINARYPATH_DMSC=$(ls build_DSMC/piclas2vtk*x86_64.AppImage)" >> $GITHUB_ENV
        echo "PICLAS2VTK_BINARYNAME_DSMC=$(basename $(ls build_DSMC/piclas2vtk*x86_64.AppImage))" >> $GITHUB_ENV

    - name: Check file existence
      id: check_files
      uses: andstor/file-existence-action@v2
      with:
        files: "${{ env.PICLAS_BINARYPATH_DMSC }}"

    - name: Fail if binary does not exist
      if: steps.check_files.outputs.files_exists == 'false'
      uses: actions/github-script@v3
      with:
        script: |
          core.setFailed('no binary found under build_DSMC/piclas*x86_64.AppImage.')

    - name: Create archives
      run: |
        mkdir artifacts
        mkdir assets
        cp ${PICLAS_BINARYPATH_DMSC} .
        #cp ${PICLAS2VTK_BINARYPATH_DMSC} .
        7z a assets/piclas-linux64.zip ${PICLAS_BINARYNAME_DSMC} ${PICLAS2VTK_BINARYNAME_DSMC}
        mv ${PICLAS_BINARYNAME_DSMC} ${PICLAS2VTK_BINARYNAME_DSMC} artifacts/.

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: piclas-binaries-v3.0.0
        path: artifacts

    - name: Upload release asset
      if: github.event.action == 'published'
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./assets/piclas-linux64.zip
        asset_name: piclas-linux64.zip
        asset_content_type: application/zip

